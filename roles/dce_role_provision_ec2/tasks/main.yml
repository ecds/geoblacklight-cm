---
# tasks file for dce_role_provision_ec2
- name: Set relative path for calling role
  set_fact:
    relative_role_path: "{{ role_path }}"

- name: Import local project enviroment vars
  include_role: 
    name: dce_role_project_env

- name: Include vars from target host
  include_vars:
    file: "{{ playbook_dir }}/host_vars/{{ host }}"

- name: Set fact to destroy ec2
  set_fact:
    ec2_exact_count: 0
  tags: [ delete-ec2, delete-all, never ]

- name: Provision EC2
  ec2:
    key_name: "{{ ec2_key_name }}"
    group: "{{ ec2_security_groups }}" 
    instance_type: "{{ ec2_instance_type }}"
    image: "{{ ec2_image }}"
    wait: yes
    wait_timeout: 500
    volumes:
      - device_name: "{{ ec2_volume_device_name }}"
        volume_type: "{{ ec2_volume_type }}"
        volume_size: "{{ ec2_volume_size }}"
        delete_on_termination: "{{ ec2_volume_delete_on_termination }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    assign_public_ip: "{{ ec2_assign_public_ip }}"
    instance_tags:
      Name: "{{ ec2_fqdn }}"
    count_tag:
      Name: "{{ ec2_fqdn }}" 
    user_data: "{{ lookup('template', 'user_data.j2') }}"
    exact_count: "{{ ec2_exact_count }}"
  register: ec2

- name: End play early to avoid fail
  meta: end_play
  when: ec2_exact_count == 0

- name: Assign singular varibles for ec2 instance 
  set_fact:
    ec2_ip: "{{ ec2|json_query('tagged_instances[0].public_ip') }}"
    ec2_id: "{{ ec2|json_query('tagged_instances[0].id') }}"

- name: Create new ansible group 
  add_host:
    name: "{{ ec2_ip }}"
    ansible_ssh_private_key_file: "{{ ec2_ssh_private_key_path }}"
    groups: ec2_group

